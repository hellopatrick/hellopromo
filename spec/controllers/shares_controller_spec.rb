require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SharesController do
  let!(:user) { Fabricate(:user) }
  let!(:share) { share = Fabricate(:share); share.owner = Fabricate(:user); share.save; share }

  def valid_attributes
    {title:"test", url:"http://example.com/", codes:"12\n\n124\n214\n\n"}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SharesController. Be sure to keep this updated too.
  def valid_session(hash={})
    {user_id:user.id}.merge(hash)
  end

  describe "GET show" do
    it "assigns the requested share as @share" do
      get :show, {:id => share.to_param}, valid_session
      assigns(:share).should eq(share)
    end
  end

  describe "GET new" do
    it "assigns a new share as @share" do
      get :new, {}, valid_session
      assigns(:share).should be_a_new(Share)
    end
  end

  describe "GET edit" do
    it "permits the owner" do
      get :edit, {:id => share.to_param}, {user_id:share.owner.id}
      response.status.should eq 200
    end
        
    it "forbids non-owner" do
      get :edit, {:id => share.to_param}, {user_id:user.id}
      response.should redirect_to share_path(share)
    end
    
    it "assigns the requested share as @share" do
      get :edit, {:id => share.to_param}, {user_id:share.owner_id}
      assigns(:share).should eq(share)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Share" do
        expect {
          post :create, {:share => valid_attributes}, valid_session
        }.to change(Share, :count).by(1)
      end

      it "assigns a newly created share as @share" do
        post :create, {:share => valid_attributes}, valid_session
        assigns(:share).should be_a(Share)
        assigns(:share).should be_persisted
      end
      
      it "creates the codes" do
        post :create, {:share => valid_attributes}, valid_session
        assigns(:share).redeemables.count.should eq 3
      end

      it "redirects to the created share" do
        post :create, {:share => valid_attributes}, valid_session
        response.should redirect_to(Share.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved share as @share" do
        # Trigger the behavior that occurs when invalid params are submitted
        Share.any_instance.stub(:save).and_return(false)
        post :create, {:share => {}}, valid_session
        assigns(:share).should be_a_new(Share)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Share.any_instance.stub(:save).and_return(false)
        post :create, {:share => {}}, valid_session
#        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested share" do
        # Assuming there are no other shares in the database, this
        # specifies that the Share created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Share.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => share.to_param, :share => {'these' => 'params'}}, {user_id:share.owner.id}
      end

      it "assigns the requested share as @share" do
        put :update, {:id => share.to_param, :share => valid_attributes}, {user_id:share.owner.id}
        assigns(:share).should eq(share)
      end

      it "redirects to the share" do
        put :update, {:id => share.to_param, :share => valid_attributes}, {user_id:share.owner.id}
        response.should redirect_to(share)
      end
    end

    describe "with invalid params" do
      it "can't update a share that is disabled" do
        expect {
          share.disabled = true
          put :update, {:id => share.to_param, :share => {title:"!"}}, {user_id:share.owner.id}
        }.to_not change(share, :title)        
      end
      
      it "assigns the share as @share" do
        # Trigger the behavior that occurs when invalid params are submitted
        Share.any_instance.stub(:save).and_return(false)
        put :update, {:id => share.to_param, :share => {}}, valid_session
        assigns(:share).should eq(share)
      end

      it "re-renders the 'edit' template" do
        share.stub(:save).and_return(false)
        # Trigger the behavior that occurs when invalid params are submitted
        put :update, {:id => share.to_param, :share => {:title => ""}}, valid_session
        # response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "disables the requested share if the current user owns it" do
      delete :destroy, {:id => share.to_param}, {user_id:share.owner_id}
      share.disabled.should be_true
    end
    
    it "deletes all the unredeemed codes" do
      delete :destroy, {:id => share.to_param}, {user_id:share.owner_id}
      share.unredeemed_codes.count.should eq 0
    end
    
    it "does not disable the requested share if the current user does not own it" do
      delete :destroy, {:id => share.to_param}, {user_id:user.id}
      share.disabled.should be_false
    end

    it "redirects to the root url" do
      delete :destroy, {:id => share.to_param}, {user_id:share.owner_id}
      response.should redirect_to(share_path(share))
    end
  end
end
